I was messing around with this for a while and couldn't get a solution (mainly complications introduced by the special cases), so I finally looked at one solution and submitted it, which got like 50% for runtime and 20% for memory. The way they guard for the special cases is genius using short-circuiting logic; I was trying to use sentry values but stuff in the middle kept being weird. After looking at it a little and making sure I understood it, I did a couple microoptimizations and brought the runtime up to 92%.
==================================================
class Solution {
public:
    bool canPlaceFlowers(vector<int>& flowerbed, int n) {
        int count = 0;
        int size = flowerbed.size();

        for (int i = 0; i < size; ++i) {
            if (flowerbed[i] == 0) {
                bool emptyLeft = (i == 0) || (flowerbed[i - 1] == 0);
                bool emptyRight = (i == size - 1) || (flowerbed[i + 1] == 0);

                if (emptyLeft && emptyRight) {
                    flowerbed[i] = 1;
                    count++;
                    if (count >= n) {
                        return true;
                    }
                }
                else if (emptyLeft)
                {
                    i+=2;
                }
            }
            else
            {
                ++i;
            }
        }

        return count >= n;
    }
};
