First attempt C++, beats 76% by both runtime and memory usage
--------------------------------------------------------------
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        bool carryOver = false;
        int digitSum = 0;
        ListNode* start = nullptr;
        ListNode* prev = start;
        while (l1 || l2)
        {
            if  (l1 && l2)
            {
                digitSum = l1->val + l2->val + carryOver;
                if (digitSum >= 10)
                {
                    carryOver = true;
                    digitSum -= 10;
                }
                else
                {
                    carryOver = false;
                }
                ListNode* newNode = new ListNode(digitSum);
                if (prev)
                {
                    prev->next = newNode;
                }
                else
                {
                    start = newNode;
                }
                prev = newNode;
                l1 = l1->next; l2 = l2->next;
            }
            //cases where we've reached the end of one of them
            else if (l1)
            {
                digitSum = l1->val + carryOver;
                if (digitSum >= 10)
                {
                    carryOver = true;
                    digitSum -= 10;
                }
                else
                {
                    carryOver = false;
                }
                ListNode* newNode = new ListNode(digitSum);
                if (prev)
                {
                    prev->next = newNode;
                }
                else
                {
                    start = newNode;
                }
                prev = newNode;
                l1 = l1->next;
            }
            else
            {
                digitSum = l2->val + carryOver;
                if (digitSum >= 10)
                {
                    carryOver = true;
                    digitSum -= 10;
                }
                else
                {
                    carryOver = false;
                }
                ListNode* newNode = new ListNode(digitSum);
                if (prev)
                {
                    prev->next = newNode;
                }
                else
                {
                    start = newNode;
                }
                prev = newNode;
                l2 = l2->next;
            }
        }
        if (carryOver)
        {
            ListNode* newNode = new ListNode(carryOver);
            prev->next = newNode;
        }
        return start;
    }
};
