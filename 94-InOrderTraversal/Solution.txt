// do it recursive and also iterative. Good learning here: we're allowed to create new class members
//(for some reason I didn't think you could)

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    std::vector<int> solution;
    void inOrderRecurse(TreeNode* root)
    {
        if (root != nullptr)
        {
            inOrderRecurse(root->left);
            solution.push_back(root->val);
            inOrderRecurse(root->right);
        }
    }
    vector<int> inorderTraversal(TreeNode* root) { 
        //use the helper function for the recursion
        inOrderRecurse(root);
        return solution;
     }